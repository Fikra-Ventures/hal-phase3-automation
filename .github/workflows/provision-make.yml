name: Zero-Touch Runner (ZTR) Provision

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Execution mode'
        required: true
        type: choice
        options:
          - auto
          - mock
          - provision
        default: 'auto'
  push:
    branches: [ main ]
    paths:
      - "scripts/provision/**"
      - ".github/workflows/provision-make.yml"

permissions:
  contents: read
  issues: write

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
  AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
  NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
  ZAPIER_WEBHOOK_URL: ${{ secrets.ZAPIER_WEBHOOK_URL }}
  MAKE_API_TOKEN: ${{ secrets.MAKE_API_TOKEN }}
  MAKE_ORG_ID: ${{ secrets.MAKE_ORG_ID }}

jobs:
  detect-secrets-and-mode:
    name: Detect secrets & mode
    runs-on: ubuntu-latest
    outputs:
      run_provision: ${{ steps.detect.outputs.run_provision }}
      mode: ${{ steps.detect.outputs.mode }}
      secrets_status: ${{ steps.detect.outputs.secrets_status }}
      missing_secrets: ${{ steps.detect.outputs.missing_secrets }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Detect secrets and determine mode
        id: detect
        run: |
          echo "üîç Detecting secrets and determining execution mode..."
          
          # Define required secrets
          REQUIRED_SECRETS=(
            "SLACK_WEBHOOK_URL"
            "OPENAI_API_KEY" 
            "AIRTABLE_API_KEY"
            "AIRTABLE_BASE_ID"
            "NOTION_API_KEY"
            "ZAPIER_WEBHOOK_URL"
          )
          
          # Check which secrets are missing
          MISSING_SECRETS=()
          PRESENT_SECRETS=()
          
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret:-}" ]; then
              MISSING_SECRETS+=("$secret")
            else
              PRESENT_SECRETS+=("$secret")
            fi
          done
          
          SECRETS_PRESENT=${#PRESENT_SECRETS[@]}
          SECRETS_TOTAL=${#REQUIRED_SECRETS[@]}
          SECRETS_MISSING=${#MISSING_SECRETS[@]}
          
          echo "üìä Secrets Status:"
          echo "   Present: ${SECRETS_PRESENT}/${SECRETS_TOTAL}"
          echo "   Missing: ${SECRETS_MISSING}"
          
          # Determine execution mode
          INPUT_MODE="${{ github.event.inputs.mode }}"
          if [ -z "$INPUT_MODE" ]; then
            INPUT_MODE="auto"
          fi
          
          echo "üéØ Input mode: $INPUT_MODE"
          
          # Logic for determining if we should run provision
          RUN_PROVISION="false"
          FINAL_MODE="mock"
          SECRETS_STATUS="partial"
          
          if [ "$INPUT_MODE" = "provision" ] && [ $SECRETS_MISSING -eq 0 ]; then
            RUN_PROVISION="true"
            FINAL_MODE="provision"
            SECRETS_STATUS="complete"
          elif [ "$INPUT_MODE" = "auto" ] && [ $SECRETS_MISSING -eq 0 ]; then
            RUN_PROVISION="true"
            FINAL_MODE="provision"
            SECRETS_STATUS="complete"
          elif [ "$INPUT_MODE" = "mock" ]; then
            RUN_PROVISION="false"
            FINAL_MODE="mock"
            SECRETS_STATUS="not_required"
          else
            RUN_PROVISION="false"
            FINAL_MODE="mock"
            if [ $SECRETS_MISSING -eq 0 ]; then
              SECRETS_STATUS="complete"
            else
              SECRETS_STATUS="missing"
            fi
          fi
          
          echo "üöÄ Final decision:"
          echo "   Mode: $FINAL_MODE"
          echo "   Run provision: $RUN_PROVISION"
          echo "   Secrets status: $SECRETS_STATUS"
          
          # Set outputs
          echo "run_provision=$RUN_PROVISION" >> $GITHUB_OUTPUT
          echo "mode=$FINAL_MODE" >> $GITHUB_OUTPUT
          echo "secrets_status=$SECRETS_STATUS" >> $GITHUB_OUTPUT
          echo "missing_secrets=$(IFS=,; echo "${MISSING_SECRETS[*]}")" >> $GITHUB_OUTPUT
          
          # Log missing secrets (but not their values)
          if [ $SECRETS_MISSING -gt 0 ]; then
            echo "‚ö†Ô∏è Missing secrets: $(IFS=,; echo "${MISSING_SECRETS[*]}")"
          fi

  run-ztr:
    name: Execute Zero-Touch Runner
    needs: detect-secrets-and-mode
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          npm install
          
      - name: Create Required Directories
        run: |
          mkdir -p reports logs artifacts
          
      - name: Run Provision Scripts
        env:
          MOCK_OWNER: ${{ github.actor }}
          MOCK_RUN_ID: ${{ github.run_id }}
        run: |
          echo "üöÄ Starting Zero-Touch Runner execution..."
          echo "Mode: ${{ needs.detect-secrets-and-mode.outputs.mode }}"
          echo "Run provision: ${{ needs.detect-secrets-and-mode.outputs.run_provision }}"
          echo "Secrets status: ${{ needs.detect-secrets-and-mode.outputs.secrets_status }}"
          
          if [ "${{ needs.detect-secrets-and-mode.outputs.run_provision }}" = "true" ]; then
            echo "üèóÔ∏è Running actual provisioning..."
            node scripts/provision/provision_scenarios.js
          else
            echo "üé≠ Running mock provisioning..."
            node scripts/provision/mock_provision.js
          fi
        continue-on-error: true
        
      - name: Upload ZTR Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ztr-report
          path: |
            ./*-report.json
            ./reports/
            ./logs/
          if-no-files-found: ignore
          retention-days: 30
          
      - name: Create/Update ZTR Run Summary Issue
        if: always()
        uses: actions/github-script@v7
        env:
          MODE: ${{ needs.detect-secrets-and-mode.outputs.mode }}
          SECRETS_STATUS: ${{ needs.detect-secrets-and-mode.outputs.secrets_status }}
          MISSING_SECRETS: ${{ needs.detect-secrets-and-mode.outputs.missing_secrets }}
          RUN_PROVISION: ${{ needs.detect-secrets-and-mode.outputs.run_provision }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read report file if it exists
            let reportData = null;
            const reportFiles = ['mock-report.json', 'provision-report.json'];
            
            for (const reportFile of reportFiles) {
              if (fs.existsSync(reportFile)) {
                try {
                  reportData = JSON.parse(fs.readFileSync(reportFile, 'utf8'));
                  break;
                } catch (error) {
                  console.log(`Could not read ${reportFile}: ${error.message}`);
                }
              }
            }
            
            const mode = process.env.MODE;
            const secretsStatus = process.env.SECRETS_STATUS;
            const missingSecrets = process.env.MISSING_SECRETS;
            const runProvision = process.env.RUN_PROVISION;
            
            const timestamp = new Date().toISOString();
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            // Determine status emoji and color
            let statusEmoji = 'üé≠';
            let statusText = 'Mock Mode';
            if (mode === 'provision') {
              statusEmoji = 'üöÄ';
              statusText = 'Provision Mode';
            }
            
            // Create issue title and body
            const issueTitle = 'ü§ñ ZTR Run Summary';
            
            const issueBody = `# Zero-Touch Runner (ZTR) Execution Summary
            
            ${statusEmoji} **Mode**: ${statusText}  
            üîê **Secrets Status**: ${secretsStatus}  
            ‚è∞ **Timestamp**: ${timestamp}  
            üîó **Workflow Run**: [View Details](${runUrl})
            
            ## Execution Details
            
            - **Mode**: \`${mode}\`
            - **Run Provision**: \`${runProvision}\`
            - **Secrets Status**: \`${secretsStatus}\`
            ${missingSecrets ? `- **Missing Secrets**: \`${missingSecrets}\`` : ''}
            
            ## Report Summary
            
            ${reportData ? `
            - **Status**: \`${reportData.status}\`
            - **Owner**: \`${reportData.owner}\`
            - **Run ID**: \`${reportData.runId}\`
            - **Timestamp**: \`${reportData.timestamp}\`
            
            ### Notes
            ${reportData.notes.map(note => `- ${note}`).join('\n')}
            ` : 'No report data available'}
            
            ## Checklist
            
            - [${mode === 'provision' ? 'x' : ' '}] Actual provisioning performed
            - [${mode === 'mock' ? 'x' : ' '}] Mock mode executed
            - [${secretsStatus === 'complete' ? 'x' : ' '}] All secrets configured
            - [${secretsStatus === 'missing' ? 'x' : ' '}] Some secrets missing
            - [x] Workflow executed successfully
            - [x] Artifacts uploaded
            - [x] Summary issue created/updated
            
            ## Artifacts
            
            Check the [workflow artifacts](${runUrl}#artifacts) for:
            - ZTR execution reports
            - Logs and diagnostic information
            - Generated configuration files
            
            ## Next Steps
            
            ${mode === 'mock' && secretsStatus === 'missing' ? `
            ‚ö†Ô∏è **To enable actual provisioning:**
            1. Configure missing secrets: \`${missingSecrets}\`
            2. Re-run workflow with mode 'provision' or 'auto'
            ` : ''}
            
            ${mode === 'provision' ? `
            ‚úÖ **Provisioning completed successfully!**
            - Infrastructure components have been set up
            - API connections have been verified
            - System is ready for use
            ` : ''}
            
            ---
            *Generated by HAL Phase 3 ZTR at ${timestamp}*`;
            
            // Search for existing ZTR summary issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              creator: 'app/github-actions',
              labels: ['ztr-summary']
            });
            
            const existingIssue = issues.data.find(issue => issue.title.includes('ZTR Run Summary'));
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                title: issueTitle,
                body: issueBody
              });
              
              console.log(`Updated existing ZTR summary issue #${existingIssue.number}`);
              
            } else {
              // Create new issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['ztr-summary', 'automation', 'hal-phase3']
              });
              
              console.log(`Created new ZTR summary issue #${newIssue.data.number}`);
            }