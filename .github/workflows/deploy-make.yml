name: Deploy Make blueprints

on:
  push:
    branches: [ main ]
    paths:
      - "make/blueprints/*.json"
      - ".github/workflows/deploy-make.yml"
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  import_blueprints:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq is available
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Import blueprints to Make
        env:
          MAKE_API_TOKEN: ${{ secrets.MAKE_API_TOKEN }}   # required
          MAKE_ORG_ID: ${{ secrets.MAKE_ORG_ID }}         # recommended (e.g., 5050298)
          MAKE_BASE: ${{ secrets.MAKE_BASE }}             # optional; defaults to https://eu2.make.com
        shell: bash
        run: |
          set -euo pipefail

          # ---- base URL (default to eu2 if not provided) ----
          if [ -z "${MAKE_BASE:-}" ]; then
            MAKE_BASE="https://eu2.make.com"
          fi

          # ---- required env checks ----
          if [ -z "${MAKE_API_TOKEN:-}" ]; then
            echo "‚ùå Missing secrets.MAKE_API_TOKEN"; exit 1
          fi

          # ---- decide endpoint: orgs/{id} vs organizations/{id} vs global ----
          API_PREFIX=""
          if [ -n "${MAKE_ORG_ID:-}" ]; then
            for seg in "orgs" "organizations"; do
              probe="${MAKE_BASE}/api/v2/${seg}/${MAKE_ORG_ID}"
              code=$(curl -sS -o /tmp/make_org_probe.json -w "%{http_code}" \
                -H "Authorization: Token ${MAKE_API_TOKEN}" "$probe" || echo "000")
              echo "Probe ${probe} -> HTTP ${code}"
              if [ "${code}" -ge 200 ] && [ "${code}" -lt 300 ]; then
                API_PREFIX="${seg}/${MAKE_ORG_ID}"
                break
              fi
            done
          fi

          if [ -n "${API_PREFIX}" ]; then
            API_URL="${MAKE_BASE}/api/v2/${API_PREFIX}/blueprints/import"
          else
            echo "‚ö†Ô∏è  No accessible org endpoint; using global import."
            API_URL="${MAKE_BASE}/api/v2/blueprints/import"
          fi

          echo "Using Make API: ${API_URL}"

          # ---- collect blueprint files ----
          shopt -s nullglob
          files=(make/blueprints/*.json)
          if [ ${#files[@]} -eq 0 ]; then
            echo "‚ÑπÔ∏è No blueprint files under make/blueprints/*.json ‚Äî nothing to import."
            exit 0
          fi

          imported=0
          failed=0

          # ---- import each blueprint ----
          for f in "${files[@]}"; do
            echo "üì¶ Importing ${f}"
            # Validate JSON
            jq -e . < "${f}" >/dev/null

            # Payload Make expects: { "blueprint": <json> }
            payload=$(jq -c '{blueprint: .}' < "${f}")

            http_code=$(curl -sS -o /tmp/make_import_resp.json -w "%{http_code}" \
              -X POST "${API_URL}" \
              -H "Authorization: Token ${MAKE_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data "${payload}" || echo "000")

            if [ "${http_code}" -ge 200 ] && [ "${http_code}" -lt 300 ]; then
              echo "‚úÖ Imported ${f}"
              imported=$((imported+1))
              continue
            fi

            echo "‚ùå Import failed for ${f} (HTTP ${http_code})"
            echo "Response:"; cat /tmp/make_import_resp.json || true

            # If org endpoint 404s, retry once with global
            if [[ "${API_URL}" != *"/blueprints/import" ]] && [ "${http_code}" -eq 404 ]; then
              fallback_url="${MAKE_BASE}/api/v2/blueprints/import"
              echo "üîÅ Retrying via global import: ${fallback_url}"
              http_code=$(curl -sS -o /tmp/make_import_resp.json -w "%{http_code}" \
                -X POST "${fallback_url}" \
                -H "Authorization: Token ${MAKE_API_TOKEN}" \
                -H "Content-Type: application/json" \
                --data "${payload}" || echo "000")
              if [ "${http_code}" -ge 200 ] && [ "${http_code}" -lt 300 ]; then
                echo "‚úÖ Imported ${f} via global endpoint"
                imported=$((imported+1))
                continue
              else
                echo "‚ùå Fallback import also failed for ${f} (HTTP ${http_code})"
                echo "Response:"; cat /tmp/make_import_resp.json || true
              fi
            fi

            failed=$((failed+1))
          done

          echo "Summary: imported=${imported}, failed=${failed}"
          if [ "${failed}" -gt 0 ]; then
            exit 1
          fi
